definitions:
  controllers.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  controllers.LoginResponse:
    properties:
      message:
        type: string
      token:
        type: string
      user:
        properties:
          email:
            type: string
          id:
            type: integer
          phoneNumber:
            type: string
          username:
            type: string
        type: object
    type: object
  controllers.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  models.CartItem:
    properties:
      id:
        type: integer
      productId:
        type: integer
      quantity:
        type: integer
      userId:
        type: string
    type: object
  models.Product:
    properties:
      brandName:
        type: string
      id:
        type: integer
      price:
        type: integer
      productName:
        type: string
      quantity:
        type: integer
      status:
        type: boolean
      userId:
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      password:
        items:
          type: integer
        type: array
      phoneNumber:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - phoneNumber
    - username
    type: object
  validators.AddProductInput:
    properties:
      brandName:
        type: string
      price:
        type: integer
      productName:
        type: string
      quantity:
        type: integer
    required:
    - brandName
    - price
    - productName
    - quantity
    type: object
  validators.AddToCartInput:
    properties:
      productId:
        type: integer
      quantity:
        minimum: 1
        type: integer
    required:
    - productId
    - quantity
    type: object
  validators.EditProductInput:
    properties:
      brand_name:
        maxLength: 100
        minLength: 2
        type: string
      price:
        type: number
      product_name:
        maxLength: 100
        minLength: 2
        type: string
      quantity:
        minimum: 0
        type: integer
    required:
    - brand_name
    - price
    - product_name
    - quantity
    type: object
  validators.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  validators.RegisterInput:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      phoneNumber:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - phoneNumber
    - username
    type: object
  validators.UpdateCartItemInput:
    properties:
      quantity:
        minimum: 1
        type: integer
    required:
    - quantity
    type: object
  validators.UpdatePasswordInput:
    properties:
      new_password:
        minLength: 8
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  validators.UpdateUserInput:
    properties:
      email:
        type: string
      phone_number:
        type: string
      username:
        type: string
    required:
    - email
    - phone_number
    - username
    type: object
info:
  contact: {}
  description: This is a sample server celler server.
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /api/cart:
    get:
      description: Get a list of all items in the user's cart
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CartItem'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Get all items in the cart
      tags:
      - cart
    post:
      consumes:
      - application/json
      description: Add a product to the user's cart
      parameters:
      - description: Cart item details
        in: body
        name: cart
        required: true
        schema:
          $ref: '#/definitions/validators.AddToCartInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CartItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Add a product to cart
      tags:
      - cart
  /api/cart/{id}:
    delete:
      description: Remove an item from the user's cart by ID
      parameters:
      - description: Cart Item ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Remove an item from the cart
      tags:
      - cart
    put:
      consumes:
      - application/json
      description: Update the quantity of an item in the user's cart
      parameters:
      - description: Cart Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated cart item details
        in: body
        name: cart
        required: true
        schema:
          $ref: '#/definitions/validators.UpdateCartItemInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CartItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Update an item in the cart
      tags:
      - cart
  /api/login:
    post:
      consumes:
      - application/json
      description: Log in a user with the provided credentials and return user data
      parameters:
      - description: User login details
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/validators.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Log in a user
      tags:
      - auth
  /api/logout:
    post:
      description: Log out the authenticated user by clearing the JWT cookie
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Log out the authenticated user
      tags:
      - auth
  /api/products:
    get:
      description: Get a list of all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get all products
      tags:
      - product
    post:
      consumes:
      - application/json
      description: Add a new product with the provided details
      parameters:
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/validators.AddProductInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Add a new product
      tags:
      - product
  /api/products/{id}:
    put:
      consumes:
      - application/json
      description: Edit an existing product with the provided details
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/validators.EditProductInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Edit an existing product
      tags:
      - product
  /api/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided details
      parameters:
      - description: User registration details
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/validators.RegisterInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /api/user:
    get:
      description: Get details of the authenticated user based on the JWT token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Get authenticated user details
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update user details with the provided information
      parameters:
      - description: User update details
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/validators.UpdateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Update user details
      tags:
      - user
  /api/user/password:
    put:
      consumes:
      - application/json
      description: Update user password with the provided old and new passwords
      parameters:
      - description: User update password details
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/validators.UpdatePasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Update user password
      tags:
      - user
swagger: "2.0"
